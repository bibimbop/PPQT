# All backslashes must be doubled \\ in u'..' strings
# Whitespace \s* does match newlines, use [ \t]* for spaces only 
#
# These searches are for cleaning up text markups:
#
# Convert italics:
# Find <i>stuff</i> change to _stuff_ or just stuff
23: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'<i>([^<]+)</i>',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'i convert',
 u'tooltip' : u'Find &lt;i>stuff&lt;/i>, change to _stuff_',
 u'regex' : True,
 u'rep1' : u'_\\1_',
 u'rep2' : u'\\1',
 u'rep3' : u'',
 u'word' : False
}
# Convert bold:
# Find <b>stuff</b> change to $stuff$ or just stuff
# To capitalize, use Find-First, then repeat: ctl-u ctl-t
22: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'<b>([^<]+)</b>',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'b convert',
 u'tooltip' : u'Find &lt;b>stuff&lt;/i>, change to $stuff$',
 u'regex' : True,
 u'rep1' : u'\\1',
 u'rep2' : u'$\\1$',
 u'rep3' : u'',
 u'word' : False
}
# Convert smallcap:
# Find <sc>stuff</sc> change to $stuff$ or just stuff
# To capitalize, use Find-First, then repeat: ctl-u ctl-t
21: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'<sc>([^<]+)</sc>',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'sc convert',
 u'tooltip' : u'Find &lt;sc>stuff&lt;/sc>, change to $stuff$',
 u'regex' : True,
 u'rep1' : u'\\1',
 u'rep2' : u'$\\1$',
 u'rep3' : u'',
 u'word' : False
}
# Delete alt-spell-dict markups:
# Find <span lang='xxx'> and </span>, delete
20: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'(<span lang=[^>]+>([^<]+)</span>)',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'kill <sd>',
 u'tooltip' : u'Find &lt;span lang='dict'>stuff&lt/span>, drop markup',
 u'regex' : True,
 u'rep1' : u'\\1',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Convert typo markup to corrected value only
# Find [typo:original:corrected] markup, leave corrected only
19: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'\\[typo:([^:]+):([^\\]]+)\\]',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'undo [typo]',
 u'tooltip' : u'Find [typo:] markup and replace with corrected word',
 u'regex' : True,
 u'rep1' : u'\\2',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Delete any block markup - apply ONLY AFTER FINAL REFLOW
# Find newline, /, letter or newline, letter, / followed by anything
# at all, ending in a newline. Use a lookahead so as not to capture
# and replace the closing newline. Only the opening newline goes.
18: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'\\n(/[CFQRPTUX\\*]|[CFQRPTUX\\*]/).*(?=\\n)',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'kill /CFQRPTUX*',
 u'tooltip' : u'Delete block markup codes <b>only after final reflow</b>',
 u'regex' : True,
 u'rep1' : u'',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Convert thought breaks - apply ONLY AFTER FINAL REFLOW
# Find <tb>, change to 5-star string
17: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'[ \\t]*<tb>[ \\t]*',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'tb -> *****',
 u'tooltip' : u'Find &lt;tb>, replace with 5-star string',
 u'regex' : True,
 u'rep1' : u'       *       *       *       *       *',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}

