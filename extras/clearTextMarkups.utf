# All backslash must be doubled \\
# Find <tb>, change to 5-star string
23: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'[ \\t]*<tb>[ \\t]*',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'tb -> *****',
 u'tooltip' : u'Find &lt;tb>, replace with 5-star string',
 u'regex' : True,
 u'rep1' : u'       *       *       *       *       *',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Find <i>stuff</i> change to _stuff_
22: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'<i>([^<]+)</i>',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'i convert',
 u'tooltip' : u'Find &lt;i>stuff&lt;/i>, change to _stuff_',
 u'regex' : True,
 u'rep1' : u'_\\1_',
 u'rep2' : u'\\1',
 u'rep3' : u'',
 u'word' : False
}
# Find <b>stuff</b> change to $stuff$ or just stuff
# To capitalize, use Find-First, then repeat: ctl-u ctl-t
21: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'<b>([^<]+)</b>',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'b convert',
 u'tooltip' : u'Find &lt;b>stuff&lt;/i>, change to $stuff$',
 u'regex' : True,
 u'rep1' : u'\\1',
 u'rep2' : u'$\\1$',
 u'rep3' : u'',
 u'word' : False
}
# Find <sc>stuff</sc> change to $stuff$ or just stuff
# To capitalize, use Find-First, then repeat: ctl-u ctl-t
20: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'<sc>([^<]+)</sc>',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'sc convert',
 u'tooltip' : u'Find &lt;sc>stuff&lt;/sc>, change to $stuff$',
 u'regex' : True,
 u'rep1' : u'\\1',
 u'rep2' : u'$\\1$',
 u'rep3' : u'',
 u'word' : False
}
# Find special dictionary markups <sd xxx> and </sd>, delete
19: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'(<sd[^>]*>|</sd>)',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'kill <sd>',
 u'tooltip' : u'Find <sd and </sd markups and delete',
 u'regex' : True,
 u'rep1' : u'',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Find [typo:correct:original] markup, make correct only
18: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'\\[typo:([^:]+):[^\\]]+\\]',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'undo [typo]',
 u'tooltip' : u'Find [typo:] markup and replace with correct word',
 u'regex' : True,
 u'rep1' : u'\\1',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Change [Footnote X: stuff] to /Q F:2 L:6\n[X] stuff\nQ/
17: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'\\[Footnote (.):\s*([^\\]]+)(?=\\]\\n)',
 u'greedy' : False,
 u'insel' : False,
 u'label' : u'fnote->/Q',
 u'tooltip' : u'Change [Footnote X: stuff] to /Q F:2 L:6,[X] stuff,Q/',
 u'regex' : True,
 u'rep1' : u'/Q F:2 L:6\\n[\\1] \\2\\nQ/',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}
# Find any block markup code and delete - ONLY AFTER FINAL REFLOW
# temporary - find should be \\n(/[CQRPTUX]|[CQRPTUX]/).*(?=\\n) and greedy False,
# but due to a bug can't use lookahead with replace
16: {  u'all' : False,
 u'andnext' : True,
 u'andprior' : False,
 u'case' : False,
 u'find' : u'\\n(/[CQRPTUX]|[CQRPTUX]/)[^\\n]*',
 u'greedy' : True,
 u'insel' : False,
 u'label' : u'kill /CQRPTUX',
 u'tooltip' : u'Delete block markup codes <b>only after final reflow</b>',
 u'regex' : True,
 u'rep1' : u'',
 u'rep2' : u'',
 u'rep3' : u'',
 u'word' : False
}

