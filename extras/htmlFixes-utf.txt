
#
# Replace [typo:original:corrected] with 
# <ins class='correction' title='original'>corrected</ins> 
# The regex picks up "original" as everything between colons
# and "corrected as whatever then precedes a "]"
#
17: { 	u'all' : False,
	u'andnext' : False,
	u'andprior' : False,
	u'case' : True,
	u'find' : u'\\[typo:([^:]+):([^\\]]+)\\]',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'typo-to-ins',
	u'tooltip' : u'[typo:orig:corr] -> &lt;ins',
	u'regex' : True,
	u'rep1' : u"<ins class='correction' title='\\1'>\\2</ins>",
	u'rep2' : u'',
	u'rep3' : u'',
	u'word' : False
}
#
# Special version of illustration change. Edit your [Illustration: stuff]
# markups inserting the image file after the colon as [Illustration:filename.typ stuff]
# Then this does what the following button does, only it also completes
# the src='images/filename.typ' coding.
#
18: { 	u'all' : False,
	u'andnext' : False,
	u'andprior' : False,
	u'case' : False,
	u'find' : u'\\n\\[Illustration:(\\S+\\.\\S+)\\s+(.+){,30}(.*)\\](?=\\n)',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'Illo:file.typ',
	u'tooltip' : u'[Illustration:filename.typ caption] to centered image with caption',
	u'regex' : True,
	u'rep1' : u"<div class='center'>\\n  <img src='images/\\1'\\n    title='\\2...' alt='\\2...'\\n  />\\n<p class='caption'>\\2\\3</p>\\n</div>",
	u'rep2' : u'',
	u'rep3' : u'',
	u'word' : False
}

#
# Replace [Illustration: stuff] with 
# <div class='center'>
#   <img src='#'
#      title='stuff...' alt='stuff...'
#   />
# <p class='caption'>stuff</p>
# </div>
# The heart of the regex is: (.{1,30})(.*) which picks up the "stuff"
# as two parts, with \1 having at most the first 30 characters and
# \2 having the remainder of "stuff".  Then we put only \1 into the
# title= and alt= strings, but \1\2 for the full caption.
# YOU MUST STILL INSPECT TITLE AND ALT because often the "stuff" contains
# special characters (like newlines or quotes) that bork the syntax.
# This version leaves src='#' so fill in images/filename.typ later.
#
19: { 	u'all' : False,
	u'andnext' : False,
	u'andprior' : False,
	u'case' : False,
	u'find' : u'\\n\\[Illustration:\\s+(.{1,30})(.*)\\](?=\\n)',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'Illo-no file',
	u'tooltip' : u'[Illustration: caption] to centered image with caption',
	u'regex' : True,
	u'rep1' : u"<div class='center'>\\n  <img src='#'\\n    title='\\1...' alt='\\1...'\\n  />\\n<p class='caption'>\\1\\2</p>\\n</div>",
	u'rep2' : u'\\2',
	u'rep3' : u'',
	u'word' : False
}

#
# Replace <sc>stuff</sc> with 
# <span class='smcap'>stuff</span> 
# The regex picks up "stuff" as anything not matching </sc>
# including newlines.
#
20: { 	u'all' : False,
	u'andnext' : False,
	u'andprior' : False,
	u'case' : True,
	u'find' : u'<sc>(.+)</sc>',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'sc-smallcap',
	u'tooltip' : u'&lt;sc> -> &lt;span class=smcap',
	u'regex' : True,
	u'rep1' : u"<span class='smcap'>\\1</span>",
	u'rep2' : u'',
	u'rep3' : u'',
	u'word' : False
}

#
# Replace [Sidenote: stuff] with 
# <div class='sidenote'>stuff</div> 
# The regex picks up "stuff" as everything after colon-space
# through a "]" that precedes a newline, so, the "stuff" can
# include embedded right-brackets as long as they are not at
# end of line (similar to footnotes).
#
21: { 	u'all' : False,
	u'andnext' : False,
	u'andprior' : False,
	u'case' : True,
	u'find' : u'\\n\\[Sidenote:\\s*(.+)\\](?=\\n)',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'sidenote',
	u'tooltip' : u'[Sidenote: text] to div class=sidenote',
	u'regex' : True,
	u'rep1' : u"\\n<div class='sidenote'>\\1</div>",
	u'rep2' : u'',
	u'rep3' : u'',
	u'word' : False
}

#
# Find subscript markup and convert to <sub>xx</sub>
# See superscript below for logic of the regex.
#
22: { 	u'all' : False,
	u'andnext' : True,
	u'andprior' : False,
	u'case' : True,
	u'find' : u'\\_(([^\\{])|\\{([^\\}]+)\\})',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'subscript',
	u'tooltip' : u'Convert _subscripts to html',
	u'regex' : True,
	u'rep1' : u'<sub>\\2\\3</sub>',
	u'rep2' : u'',
	u'rep3' : u'',
	u'word' : False
}

#
# Find superscript markup and convert to <sup>xx</sup>
# Breaking down the Regex (and un-doubling the backslashes)
# \^     first, a literal caret
# (      start alternate expression (capture \1)
# ([^\{]) find one character that is not a { (capture \2)
# |      or...
# \{    find a literal { followed by
# ([^\}]+) one or more not-} characters (capture \3)
# \}    followed by a literal }
# ) end of alternate expression. So either \2 is a one-char super,
# and \3 is null, or \3 is a one-or-more char super and \2 is null.
# Either way, replacing with <sup>\2\3</sup> does the trick.
#
23: { 	u'all' : False,
	u'andnext' : True,
	u'andprior' : False,
	u'case' : True,
	u'find' : u'\\^(([^\\{])|\\{([^\\}]+)\\})',
	u'greedy' : False,
	u'insel' : False,
	u'label' : u'superscript',
	u'tooltip' : u'Convert ^ superscripts to html',
	u'regex' : True,
	u'rep1' : u'<sup>\\2\\3</sup>',
	u'rep2' : u'',
	u'rep3' : u'',
	u'word' : False
}

