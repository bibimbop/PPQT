A file of find buttons can define any or all of the 24 user-defined buttons.

To see the canonical form of the file, use File > Save Find Buttons.
Set some user-defined buttons, save them to a file, then edit the 
file to make new definitions.

While loading the file, PPQT skips all lines until it sees a line
that matches this regex: ^\s*(\d+)\s*:\s*\{

that is, a line that starts with an integer, colon and a left brace,
for example
   17:{

This means you can put any kind of commentary in between button
definitions in the file.

Once a button definition starts, it continues through a line that
ends in a right brace, }.

The integer (17 in the example above) is the number of the button
to be loaded. The buttons are numbered from 23 at the bottom right
up to zero at the top left. Yes, 1-24, but origin-zero because
programmers like to infuriate users.

The contents between the { braces } must be a Python "dict"
definition, a series of items separated by commas, where an
item is a key, a colon, and a value, for example
     'insel' : False,

White space is allowed around the items. The items can be one
to a line or all on one line.

Each item specifies a value for one of the Find/Replace widgets.
A widget that is not specified, will not be changed when the
button is clicked. For example if there is no item with the
key of 'insel' then the In Sel'n switch will be unchanged when
this button is clicked.

If the text from { to } inclusive does not constitute a valid
Python literal dict definition, it is simply ignored. No errors
are issued.

The item keys and their values are as follows. Only one item
is required, 'label':'string'. If no 'label' key with a string
value is given, the definition is ignored.

 KEY         WIDGET               VALUE
 
 'all'       All! switch          True or False
 'andnext'   &Next switch         True or False
 'andprior'  &Prior switch        True or False
 'case'      Respect Case switch  True or False
 'find'      Find text box        'string in quotes'
 'greedy'    Greedy switch        True or False
 'insel'     In Sel'n switch      True or False
 'label'     Button label         'string in quotes'
 'tooltip'   Button tooltip       'string in quotes'
 'regex'     Regex switch         True or False
 'rep1'      Replace text box 1   'string in quotes'
 'rep2'      Replace text box 2   'string in quotes'
 'rep3'      Replace text box 3   'string in quotes'
 'word'      Whole Word switch    True or False

True and False must be written in full with an initial capital,
as shown.

Because of the Python syntax for literal strings, when you want
to include a backslash \ in a string, you must double it: \\
Thus use \\n to put the two characters \n in a string. If you
fail to double the slash, \n will go into the string as a literal
newline.

You can write any unicode value into a string using the
syntax \uxxxx where xxxx is four hexadecimal digits.
Alternatively you can just put the characters in the string
as long as you save the file as UTF-8 format.
